---
title: "p2_natlas_preprocess metadata sheet"
author: "Mirela Balan"

date: "26.Oct.2025"
date-modified: "today"
date-format: "DD.MMM.YYYY"

execute: 
  echo: true
warning: false
#message: false
  
from: markdown+emoji
categories: [preprocess, metadata]
toc: true
toc-depth: 3
#fig-dpi: 300
format:
  html:
    embed-resources: true
    df-print: kable
    page-layout: full
    #code-overflow: wrap
    fig-width: 8
    fig-height: 6
code-line-numbers: true
number-sections: true

## to wrap output
include-in-header:
  - text: |
      <style>
      .cell-output-stdout code {
        word-break: break-wor !important;    
        white-space: pre-wrap !important;
      }   
      </style>
---


```{r}
#| label: setup
#| echo: false

# https://bookdown.org/yihui/rmarkdown-cookbook/time-chunk.html

all_times <- list()  # store the time for each chunk
                                                                                                                                                                                            
knitr::knit_hooks$set(time_it = local({
  now <- NULL
  function(before, options) {
    if (before) {
      # record the current time before each chunk
      now <<- Sys.time()
    } else {
      # calculate the time difference after a chunk
      res <- difftime(Sys.time(), now, units = "mins")
      # return a character string to show the time
      all_times[[options$label]] <<- res
    }
  }
})
)

knitr::opts_chunk$set(
  # don't use, has issues with a lot of symbols
  # https://yihui.org/formatr/
  # tidy = TRUE,
  # cache.lazy = FALSE#,   # otherwise you get "Error in `lazyLoadDBinsertVariable()`: ! long vectors not supported yet: connections.c:6093"
  time_it = TRUE
)

#to crop the empty white space around the pdf plots
knitr::knit_hooks$set(crop = knitr::hook_pdfcrop)
```


```{r}
#| label: libraries_no_renv
#| output: false

## conda env: ../envs/01_preprocess_xlsx_env

# if (!"BiocManager" %in% installed.packages())
#   install.packages("BiocManager")

x <- c("readODS", "tidyverse", "magrittr")
#BiocManager::install(x)

## Load libraries
invisible(lapply(x, library, character.only = TRUE))

source("../codebase/functions/helper_functions.R")
set.seed(42)
#---------

tstamp <- format(Sys.time(), '%Y-%m-%d-%H%M')
tstamp

start_time <- Sys.time()
start_time
```


This script exports the metadata from the "ods" format and saves it normalized.

3 patient ids have only dermis samples, not epidermis, unlike all the others: 

- SCD-1908204 - GSM7932779 - GSE249279 - 38172207 - Dermis - Gudjonsson 
- SCD-1908205 - GSM7932780 - GSE249279 - 38172207 - Dermis - Gudjonsson 
- SCD-1909116 - GSM7932781 - GSE249279 - 38172207 - Dermis - Gudjonsson 

Other 3 need to be merged ->
- patient_id dupl
  - SCD-404Y	2			
  - SCD-547Y	2			
  - SCD-604Y	2			
  - SCD-925Y	2

Save it as tsv otherwise the 'immunosuppresant' column misbehaves.

Merge with metadataDenton to correct for missing naming.

```{r}
#| label: locations
#| output: false

## input
#list.files("../annotations/1_raw/")
in_meta <- "../annotations/1_raw/2025_10_29_PublicScRNAseqData.ods"
load_sheet = "Sheet1"

in_denton <- "../annotations/1_raw/2025_10_31_SraRunTable.csv"
```


```{r}
#| label: load_file

meta <- readODS::read_ods(in_meta, 
                          sheet = load_sheet,
                          col_names = T,
                          row_names = F,
                          na = "",
                          as_tibble = F,
                          trim_ws = T,
                          ods_format = "ods",
                          n_max = 83) %>% 
  rename_with(tolower)

head(meta)
dim(meta)

## add paper names
counts_ref <- meta %>% 
  group_by(dataset) %>% 
  dplyr::count(dataset, name = "nr_samples_in_dataset") %>% 
  ungroup() %>% 
  mutate(ref = c("Lafyatis", NA, "Gudjonsson", "Denton")) %T>% 
  {head(.) %>% print(.)} 

meta_ref <- left_join(meta, counts_ref, by="dataset")
head(meta_ref)
dim(meta_ref)
```


```{r}
#|label: fix_Denton

## keep the other detasets meta 
meta_noDenton <- meta_ref %>%
  ## to keep also the NA rows!!!
  filter((ref != "Denton") %>% replace_na(TRUE)) %T>%
  {dim(.) %>% print(.)} %T>% 
  {head(.) %>% print(.)} 

## fix the metadata for the Denton dataset
meta_onlyDenton <- meta_ref %>% 
  filter(ref == "Denton")

meta_dent <- read.csv(in_denton,
         header = T) %>% 
  select(c(Run, batch, BioProject, BioSample, disease, Experiment, Library.Name, SRA.Study, tissue)) %>% 
  rename_with(tolower) %>% 
  rename_with(~gsub("\\s+|\\.", "_", .)) 

meta_corrDenton <- left_join(meta_onlyDenton, meta_dent, by = c("sampleaccession"="library_name")) %>% 
  select(colnames(meta_onlyDenton), run) %>% 
  select(-sampleid) %>% 
  rename(sampleid = run) %>% 
  ## move column
  relocate(sampleid, .before = "sampleaccession") %T>%
  {dim(.) %>% print(.)} %T>% 
  {head(.) %>% print(.)}  

## merge the corrected metadata back into main
meta_fin <- rbind(meta_noDenton, meta_corrDenton) %T>%
  {dim(.) %>% print(.)} %T>% 
  {head(.) %>% print(.)} 
```


```{r}
#|label: process_file

## make necessary cols factorial
meta_fin <- meta_fin %>%
  mutate(across(c(dataset, pubmedid, skincompartment, experimentalbatch, singlecellmethod, sex, indication, biopsysite, nr_samples_in_dataset, ref), as.factor)) %>% 
  dplyr::rename(pubmed_id = pubmedid, 
         skin_compartment = skincompartment, 
         experimental_batch = experimentalbatch,
         singlecell_method = singlecellmethod,
         biopsy_site = biopsysite,
         sample_accession = sampleaccession,
         patient_id = patientid,
         disease_duration_years = diseaseduration_years,
         sample_id = sampleid,
         immunosuppressant_medication_at_biopsy = immunosuppressantmedicationatbiopsy) %T>%
  {dim(.) %>% print(.)} %T>% 
  {head(.) %>% print(.)} 


## get levels of all factorial columns
meta_fin <- meta_fin %>%
  mutate(across(where(is.factor), droplevels ) )

## get levels of all factorial columns
meta_fin %>%
  select(where(is.factor)) %>%
  sapply(levels)

## any duplicated values?
lapply(colnames(meta_fin) %>% list(), function(x) meta_fin %>%
         group_by(patient_id) %>%
         filter(n() > 1) %>%
         summarize(n = n()) ) 

## export the data
## Save it as tsv otherwise the 'immunosuppresant' column misbehaves
write_tsv(x = meta_fin,
          file = "../annotations/2_export/2025.10.26_public_scrnaseq_data.tsv",
          na = "NA")
```


```{r}
#| label: save_times

t(as.data.frame(all_times))
# write.csv(x = t(as.data.frame(all_times)), file = "../output/timings/dim_reduction_vignette_times.csv")
```

```{r}
#| label: sessionInfo
sessionInfo()
```
