---
title: "p2_natlas: qc and preprocessing - 10x nucscRNAseq for Skin - tests"
author: "Mirela Balan"

date: "27.Oct.2025"
date-modified: "today"
date-format: "DD.MMM.YYYY"

execute:
  echo: true
warning: false
#message: false

from: markdown+emoji
categories: [references, organization]
toc: true
toc-depth: 3
#fig-dpi: 300
format:
  html:
    embed-resources: true
    df-print: kable
    page-layout: full
    #code-overflow: wrap
    fig-width: 8
    fig-height: 6
code-line-numbers: true
number-sections: true

include-in-header:
  - text: |
      <style>
      .cell-output-stdout code {
        word-break: break-wor !important;
        white-space: pre-wrap !important;
      }
      </style>
---


```{r}
#| label: setup
#| echo: false

# https://bookdown.org/yihui/rmarkdown-cookbook/time-chunk.html

all_times <- list()  # store the time for each chunk
                                                                                                                                                                                            
knitr::knit_hooks$set(time_it = local({
  now <- NULL
  function(before, options) {
    if (before) {
      # record the current time before each chunk
      now <<- Sys.time()
    } else {
      # calculate the time difference after a chunk
      res <- difftime(Sys.time(), now, units = "mins")
      # return a character string to show the time
      all_times[[options$label]] <<- res
    }
  }
})
)

knitr::opts_chunk$set(
  # don't use, has issues with a lot of symbols
  # https://yihui.org/formatr/
  # tidy = TRUE,
  # cache.lazy = FALSE#,   # otherwise you get "Error in `lazyLoadDBinsertVariable()`: ! long vectors not supported yet: connections.c:6093"
  time_it = TRUE
)

#to crop the empty white space around the pdf plots
knitr::knit_hooks$set(crop = knitr::hook_pdfcrop)
```


# Load libraries

```{r}
#| label: libraries_funct

x <- c("tidyverse", "magrittr", "Seurat",
       "scDblFinder", 
       "scater", "BiocParallel")

source("../functions/helper_functions.R")

## Load libraries
invisible(lapply(x, library, character.only = TRUE))

set.seed(42)
#---------

## testing
tstamp <- format(Sys.time(), '%Y-%m-%d-%H%M')

start_time <- Sys.time()
start_time
```

Proof of principle, quickly analyzing the datasets with no soupX. This script only explores the quality of the data and filters outliers.

## loc

```{r}
#| label: paths_loc_output_dir

#step_dir <- paste0("../../p2_results/")
#necessary_dirs <- c("00_objects/", "02_seurat_preprocessing_markers_tests/")
#output_dirs <- fh4.create_subdirs(step_dir, necessary_dirs)
#
#in_cellranger_counts_multiple_obj <- "../../p1_results/01_run_cellranger_only/"
```

## hb

```{r}
#| label: paths_hb_output_dir

## Set up output dirs
step_dir <- "/gpfs/project/projects/MedRheuma/balmir/projects/p2_scrnaseq_natlas_ssc/"
necessary_dirs <- c("p2_results/00_objects/", "p2_results/01_preproc_qc_seurat_tests/")
output_dirs <- fh4.create_subdirs(step_dir, necessary_dirs)
in_cellranger_counts_multiple_obj <- ${step_dir}"/data/internal/cellranger_count/"
```



```{r}
#| label: data_location

samples <- dir(path = in_cell_ranger_counts_multiple_obj, 
               recursive = T, 
               pattern = "filtered_feature_bc_matrix")
samples

id_samples <- gsub("/.*", "", samples)
id_samples
```


# Preprocessing  
  
## Load h5 objects and remove ambient RNA with SoupX

```{r}
#| label: run_soupX

# obj_list <- lapply(samples, function(i){
#   id <- gsub('-filtered_feature_bc_matrix.h5', '', i)
#   toc <- Read10X_h5(paste0(PATH, '/', 'filtered_count_tables_h5/', i))
#   tod <- Read10X_h5(paste0(PATH, '/', 'raw_count_tables_h5/', id, '-raw_feature_bc_matrix.h5'))
#   toc <- as(toc, 'sparseMatrix')
#   tod <- as(tod, 'sparseMatrix')[rownames(toc),]
#   
#   tmp <- CreateSeuratObject(toc)
#   tmp <- NormalizeData(tmp, verbose = F) %>% FindVariableFeatures(verbose = F) %>% ScaleData(verbose = F) %>% 
#     RunPCA(verbose = F) %>% FindNeighbors(dims = 1:10, verbose = F) %>% FindClusters(resolution = 1, verbose = F)
#  
#   sc <- SoupChannel(tod, toc, calcSoupProfile = FALSE)
#   soupProf <- data.frame(row.names = rownames(toc),
#                          est = rowSums(toc)/sum(toc),
#                          counts = rowSums(toc))
#   sc <- setSoupProfile(sc, soupProf)
#   sc <- setClusters(sc, tmp$seurat_clusters)
#   sc <- autoEstCont(sc, doPlot = FALSE, verbose = F)
#   mat <- adjustCounts(sc, roundToInt = TRUE, verbose = T)
#   obj <- CreateSeuratObject(counts = toc, project = id)
#   obj[['SoupX']] <- CreateAssay5Object(counts = mat)
#   
#   rm(toc, tod, id, tmp, sc, mat)
#   gc()
#   
#   return(obj)
# })
# 
# obj <- Reduce(function(x, y) merge(x, y), obj_list)
# obj <- JoinLayers(obj)
# 
# 
# rm(obj_list, samples)
# gc()
# 
# DefaultAssay(obj) <- 'SoupX'
# obj <- JoinLayers(obj)
# obj <- UpdateSeuratObject(obj)
```


## (Alt) Load h5 objects 
```{r}
#| label: test_data

## Test to see how many genes we lose if we set up thresholds
#mx.sparse <- Read10X_h5(paste0(in_cellranger_counts_multiple_obj, samples[1]), 
#           use.names = T,
#           unique.features = T)

## load with which params?
#dim(mx.sparse)
## nrow = genes/ ncol = cells
## 33.696 / 9.140

## features/ genes
#nrow(mx.sparse)
# 33.696
#nrow(mx.sparse[rowSums(mx.sparse>0)>=3, ])
# 20.108
```



## explore unfiltered objects

```{r load_data}
#rm(mx.sparse)
#gc()

fc1.load_sc <- function(h5_path, obj, obj_name) {
  ## create seurat object
  mx.sparse <- Read10X_h5(paste0(h5_path, obj),
             use.names = T,
             unique.features = T)

  seu_obj <- CreateSeuratObject(counts = mx.sparse,
                                project = obj_name,
                                assay = "RNA",
                                min.cells = 3,      ## features detected in at least this many cells
                                min.features = 200) ## cells where at least this many features are detected

  ## Add the mitochondrial content
  seu_obj[["percent.mt"]] <- PercentageFeatureSet(seu_obj,
                                                  pattern = "^mt-")
  ## Add short name
  seu_obj@meta.data <- seu_obj@meta.data %>% 
    mutate(abrev_name = gsub(".*_", "", orig.ident) )

  ## Make some obj columns factorial - helps with plotting
  fact_cols <- c("orig.ident", "abrev_name")
  seu_obj[[fact_cols]] <- lapply(seu_obj[[fact_cols]], factor)


  return(seu_obj)

  }

seu_obj_list <- lapply(1:length(samples),
                      function(x) fc1.load_sc(h5_path = in_cellranger_counts_multiple_obj,
                                              obj = samples[x],
                                              obj_name = id_samples[x] ))

seu_merge_unfilt <- merge(seu_obj_list[[1]], 
                   seu_obj_list[[2]], 
                   add.cell.ids = c(1,2), 
                   project="p2_natlas")

seu_merge_unfilt <- JoinLayers(seu_merge_unfilt)

## Make some obj columns factorial - helps with plotting
fact_cols <- c("orig.ident", "abrev_name")
seu_merge_unfilt[[fact_cols]] <- lapply(seu_merge_unfilt[[fact_cols]], factor)
  
seu_merge_unfilt@meta.data %>% head()
seu_merge_unfilt@meta.data %>% tail()

rm(seu_obj_list)
gc()
```


## unfiltered plots

```{r}
#| label: vlnPlots_unfiltered

fp3.violinplot <- function(st.merged_obj,
			to_plot =  c("nFeature_RNA", "nCount_RNA", "percent.mt"),
			to_group = "orig.ident",
			to_split = "orig.ident",
			bol = F,
			str_subtitle = "",
			str_plt_nr = "01_",
			diam = 2, 
			log_switch = T,
			out_dir,
			cols = c("lightsteelblue", "orange", "pink", "steelblue", "salmon", "turquoise") ) {

  vp <- VlnPlot(st.merged_obj,
                features = to_plot,
                assay = "RNA",
                layer = 'counts',
                group.by = to_group,
                split.by = to_split,
                split.plot = bol,
                pt.size = diam,
                log = log_switch,
                cols=cols) +
    theme(legend.position = "bottom",
          legend.spacing.x = unit(0.1, 'cm'),
          legend.text = element_text(size=9),
          legend.key.size = unit(0.2, "cm")) +
    patchwork::plot_annotation(
      title = "Overview of metrics for all samples",
      subtitle = str_subtitle,
      theme = theme(axis.title.x = element_blank(),
                    plot.title = element_text(size=16, hjust = 0.5),
                    plot.subtitle = element_text(hjust = 0.5))  )
   ggsave(filename = paste0(c(output_dirs[2],
                                str_plt_nr,
                                str_subtitle, ".png"),
                              collapse=""),
            plot = vp,
            height = 7,
            width = 20)
    return(vp)
}

fp3.violinplot(seu_merge_unfilt, 
               to_group = "abrev_name", 
               to_split = "abrev_name", 
               log_switch = T,
               diam = 0)
```

```{r}
#| label: vlnPlots_unfiltered_complexity

seu_merge_unfilt[['log10GenesPerUMI']] <- log10(seu_merge_unfilt[['nFeature_RNA']]) / log10(seu_merge_unfilt[['nCount_RNA']])

fp3.violinplot(seu_merge_unfilt, 
               to_plot = "log10GenesPerUMI",
               to_group = "abrev_name", 
               to_split = "abrev_name", 
               log_switch = F,
               diam = 0) +
  geom_hline(yintercept = .75, color = 'red3')
```


```{r}
#|label: histograms_thresholds_to_filter

seu_merge_unfilt[[]] %>% 
  ggplot(aes(color = abrev_name, x = nCount_RNA, fill = abrev_name)) +
  geom_density(alpha = .2) +
  coord_cartesian(xlim = c(50, 200000)) +
  scale_x_log10() +
  theme_classic() +
  geom_vline(xintercept = 50000, colour = 'red3')

seu_merge_unfilt[[]] %>% 
  ggplot(aes(color = abrev_name, x = nFeature_RNA, fill = abrev_name)) +
  geom_density(alpha = .2) +
  scale_x_log10() +
  theme_classic() +
  geom_vline(xintercept = 200, colour = 'red3')

```

## filter
  
Criteria:  
- `nCount` < 50000. 
- `percent.mt` < 20. 
- `nFeature` > 250. 
- complexity `log10GenesPerUMI` > 0.75. 


```{r qc}
#|label: filter

# Size of objects before filtering
print(paste0("pre-filter: ", dim(seu_merge_unfilt)[1], " genes/features & ", dim(seu_merge_unfilt)[2], " cells"))

seu_merge_filt <- subset(seu_merge_unfilt, 
                         nFeature_RNA > 200 & 
                           nCount_RNA < 50000 & 
                           percent.mt < 20 & 
                           log10GenesPerUMI > .75)

# Size of objects after first filtering
print(paste0("post-filt1: ", dim(seu_merge_filt)[1], " genes/features & ", dim(seu_merge_filt)[2], " cells"))

rm(seu_merge_unfilt)
gc()
```


## filtered plots

```{r}
#| label: vlnPlots_filtered

fp3.violinplot(seu_merge_filt, 
               to_group = "abrev_name", 
               to_split = "abrev_name", 
               log_switch = T,
               diam = 0)
```

```{r}
#| label: vlnPlots_filtered_complexity

seu_merge_filt[['log10GenesPerUMI']] <- log10(seu_merge_filt[['nFeature_RNA']]) / log10(seu_merge_filt[['nCount_RNA']])

fp3.violinplot(seu_merge_filt, 
               to_plot = "log10GenesPerUMI",
               to_group = "abrev_name", 
               to_split = "abrev_name", 
               log_switch = F,
               diam = 0) +
  geom_hline(yintercept = .75, color = 'red3')
```


```{r}
#|label: histograms_thresholds_after_filter

seu_merge_filt[[]] %>% 
  ggplot(aes(color = abrev_name, x = nCount_RNA, fill = abrev_name)) +
  geom_density(alpha = .2) +
  coord_cartesian(xlim = c(50, 200000)) +
  scale_x_log10() +
  theme_classic() +
  geom_vline(xintercept = 50000, colour = 'red3')

seu_merge_filt[[]] %>% 
  ggplot(aes(color = abrev_name, x = nFeature_RNA, fill = abrev_name)) +
  geom_density(alpha = .2) +
  scale_x_log10() +
  theme_classic() +
  geom_vline(xintercept = 200, colour = 'red3')

```

## doublet removal
  
```{r scDbl}
#|label: doublet_removal

sce_dbl <- scDblFinder(SingleCellExperiment(list(counts = seu_merge_filt@assays$RNA$counts)))
#sce_dbl <- scDblFinder(SingleCellExperiment(list(counts = seu_merge_filt@assays$SoupX$counts)))

seu_merge_filt$scDblFinder_score <- setNames(sce_dbl$scDblFinder.score, colnames(sce_dbl))
seu_merge_filt$scDblFinder_class <- setNames(sce_dbl$scDblFinder.class, colnames(sce_dbl))

rm(sce_dbl)
gc()

seu_merge_filt@meta.data %>% 
  head()
  
table(seu_merge_filt$abrev_name, seu_merge_filt$scDblFinder_class)

saveRDS(seu_merge_filt,
        paste0(output_dirs[1],
               '01_obj_filtered_nonIntegrated_doubletRemoval_', 
               tstamp, 
               '.rds'))
```


# Timing and session information

```{r}
#| label: save_times

Sys.time() - start_time

t(as.data.frame(all_times))
```

```{r}
#| label: sessionInfo

sessionInfo()
```

